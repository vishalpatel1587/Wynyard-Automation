// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TestAutomation.Features.Integration.Handlers.Lib.XmlTransformation
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("XmlTransformation")]
    [NUnit.Framework.CategoryAttribute("integration")]
    [NUnit.Framework.CategoryAttribute("XmlTransformation")]
    public partial class XmlTransformationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "XmlTransformation.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "XmlTransformation", "a Xslt transformation is perfomed over a known Xml", ProgrammingLanguage.CSharp, new string[] {
                        "integration",
                        "XmlTransformation"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Transform an identified UFED section")]
        [NUnit.Framework.TestCaseAttribute("Contacts", "UfedLogical", null)]
        [NUnit.Framework.TestCaseAttribute("Outgoing Calls", "UfedLogical", null)]
        [NUnit.Framework.TestCaseAttribute("Incoming Calls", "UfedLogical", null)]
        [NUnit.Framework.TestCaseAttribute("Missed Calls", "UfedLogical", null)]
        [NUnit.Framework.TestCaseAttribute("SMS Messages", "UfedLogical", null)]
        [NUnit.Framework.TestCaseAttribute("MMS Messages", "UfedLogical", null)]
        [NUnit.Framework.TestCaseAttribute("Image Files", "UfedLogical", null)]
        [NUnit.Framework.TestCaseAttribute("Ringtone Files", "UfedLogical", null)]
        [NUnit.Framework.TestCaseAttribute("Audio Files", "UfedLogical", null)]
        [NUnit.Framework.TestCaseAttribute("Video Files", "UfedLogical", null)]
        [NUnit.Framework.TestCaseAttribute("Calendar Events", "UfedLogical", null)]
        [NUnit.Framework.TestCaseAttribute("Contacts", "UfedPhysical", null)]
        [NUnit.Framework.TestCaseAttribute("Calls", "UfedPhysical", null)]
        public virtual void TransformAnIdentifiedUFEDSection(string sectionName, string extractType, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transform an identified UFED section", exampleTags);
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given(string.Format("an extract type {0} for a certain Ufed file", extractType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.And(string.Format("a section {0} is identified", sectionName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
 testRunner.And("that section relates to a specific transformation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.And("a valid Xml document is provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.And("a valid Xlst document is provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.When("the XmlTransformation Handler is called", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
 testRunner.Then("a binary file with a serialized object is saved in a given path", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
